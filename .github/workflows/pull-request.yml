name: Pull Request Validation

on:
  pull_request:
    branches: [master]

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci --force

      - name: Run linter
        run: npm run lint

      - name: Check formatting
        run: npm run format -- --check

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    env:
      NODE_ENV: integration
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Clean install dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install

      - name: Run unit tests
        run: npm run test:run

      - name: Generate coverage report
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-coverage-pr-${{ github.event.pull_request.number }}
          path: coverage/
          retention-days: 30

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: lint
    env:
      NODE_ENV: integration
      # Add secrets for integration environment
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Clean install dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install

      - name: Create .env.test file
        run: |
          echo "🔧 Creating .env.test file..."
          echo "🔧 Available secrets check:"
          echo "SUPABASE_URL: ${{ secrets.SUPABASE_URL != '' && 'SET' || 'NOT SET' }}"
          echo "SUPABASE_KEY: ${{ secrets.SUPABASE_KEY != '' && 'SET' || 'NOT SET' }}"
          echo "SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY != '' && 'SET' || 'NOT SET' }}"
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" > .env.test
          echo "SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}" >> .env.test
          echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> .env.test
          echo "NODE_ENV=test" >> .env.test
          echo "TEST_USER_EMAIL=test@example.com" >> .env.test
          echo "TEST_USER_PASSWORD=testpassword123" >> .env.test
          echo "ADMIN_USER_EMAIL=admin@example.com" >> .env.test
          echo "ADMIN_USER_PASSWORD=adminpassword123" >> .env.test
          echo "🔧 Contents of .env.test:"
          cat .env.test

      - name: Install Playwright browsers
        run: npx playwright install chromium

      - name: Run E2E tests
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: npm run test:e2e

      - name: Upload E2E results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results-pr-${{ github.event.pull_request.number }}
          path: playwright-report/
          retention-days: 30

  status-comment:
    name: Status Comment
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, e2e-tests]
    if: always()
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Create PR status comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## 🤖 Pull Request Validation Results

            **Linting:** ${{ needs.lint.result == 'success' && '✅ Passed' || '❌ Failed' }}
            **Unit Tests:** ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }}
            **E2E Tests:** ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }}

            ---
            ${{ needs.lint.result == 'success' && needs.unit-tests.result == 'success' && needs.e2e-tests.result == 'success' && '🎉 All checks passed! This PR is ready for review.' || '⚠️ Some checks failed. Please review the failed jobs above.' }}

            **Commit:** ${{ github.event.pull_request.head.sha }}
            **Author:** @${{ github.event.pull_request.user.login }}
          reactions: ${{ needs.lint.result == 'success' && needs.unit-tests.result == 'success' && needs.e2e-tests.result == 'success' && 'rocket' || 'eyes' }}
